source('~/Desktop/DESeqtools/R/PCA.R', echo=TRUE)
#' Function to plot heatmaps of PC loadings
#'
#' @param PC principal component of which the loadings should be plotted
#' @param ntop number of genes to plot, sorted by variance
#' @export
#'
plotLoadings <- function(input=dds_vst_df, #or removedbatch_dds_vst
PC,
ntop){
if(ntop=="all"){
pca <- prcomp(t(input))
}else{
select <- order(rowVars(input), decreasing=TRUE)[c(1:ntop)]
pca <- prcomp(t(input[select,]))
}
Loadings <- pca$rotation[,PC]
Loadings <- Loadings[order(Loadings, decreasing = T)]
Loadings <- names(Loadings[c(1:20,(length(Loadings)-19):length(Loadings))])
heatmap <- norm_anno[norm_anno$GENEID %in% Loadings,]
rownames(heatmap) <- paste(heatmap$GENEID,": ",heatmap$SYMBOL,sep="")
heatmap <- heatmap[,colnames(heatmap) %in% sample_table$ID]
heatmap_scale <- as.matrix(t(scale(t(heatmap))))
# Heatmap
pheatmap(heatmap_scale,
main=paste("Hierarchical Clustering of top20 ",PC, " loadings in both directions",sep=""),
show_rownames=TRUE,
show_colnames = TRUE,
annotation_col = plot_annotation,
annotation_colors = ann_colors,
breaks = scaleColors(heatmap_scale, 2)[["breaks"]],
color = scaleColors(heatmap_scale, 2)[["color"]],
cluster_cols = T,
fontsize=6)
}
library(devtools)
devtools::load_all(path = "E:/Deniz/Git/usr/bin/DESeqtools_Deniz")
source('~/Desktop/DESeqtools/R/Means.R', echo=TRUE)
for(i in conditions){
i <- as.character(i)
#print(i)
tmp <- input[,colnames(input) %in%
anno$ID[anno[,colnames(anno)==condition]==i]]
if(class(tmp)=="numeric"){
tmp<-as.data.frame(tmp)
colnames(tmp)<-i
df[,i]<-tmp
}else{
df[,i]<- rowMeans(tmp)
}
}
mean_function<- function(input=norm_anno,
anno=sample_table,
condition="condition"){
conditions <- unique(anno[,colnames(anno) == condition])
df <- data.frame(matrix(nrow = nrow(input),
ncol= length(conditions)))
colnames(df) <- as.character(conditions)
rownames(df) <- norm_anno$GENEID
for(i in conditions){
i <- as.character(i)
#print(i)
tmp <- input[,colnames(input) %in%
anno$ID[anno[,colnames(anno)==condition]==i]]
if(class(tmp)=="numeric"){
tmp<-as.data.frame(tmp)
colnames(tmp)<-i
df[,i]<-tmp
}else{
df[,i]<- rowMeans(tmp)
}
}
df$GENEID <- row.names(df)
rownames(df) <- df$GENEID
df <- merge(df, gene_annotation, by = "GENEID")
rownames(df) <- df$GENEID
return(df)
}
